import org.eclipse.jgit.revwalk.RevWalk

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.kyori.indra.git' version '2.1.1'
}

group = 'com.coadon.almpp'
version = '1.2.0-SNAPSHOT'

repositories {
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    mavenCentral()
}

dependencies {
    compileOnly 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'

    implementation 'net.kyori:adventure-text-minimessage:4.2.0-SNAPSHOT'

    implementation 'org.slf4j:slf4j-api:1.7.36'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

project.ext {
    FULL_VERSION = "${version}".replace("-SNAPSHOT", "-dev+${commitsSinceLastTag()}-${!indraGit.isPresent() ? "unknown" : indraGit.commit().abbreviate(7).name()}")
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: project.ext.FULL_VERSION]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.shadowJar {
    tasks.shadowJar.archiveBaseName.set(project.name)
    tasks.shadowJar.archiveVersion.set(project.ext.FULL_VERSION)
    tasks.shadowJar.archiveClassifier.set('')
}

build {
    dependsOn(tasks.shadowJar)
}

test {
    useJUnitPlatform()
}

jar {
    // Disable jar task
    enabled = false
}

def commitsSinceLastTag() {
    def indraGit = project.extensions.findByName("indraGit")

    if (indraGit == null || !indraGit.isPresent() || indraGit.tags().isEmpty()) {
        return -1
    }

    def tags = indraGit.tags()
    def depth = 0
    def walk = new RevWalk(indraGit.git().getRepository())
    def commit = walk.parseCommit(indraGit.commit())
    while (true) {
        for (tag in tags) {
            if (walk.parseCommit(tag.getLeaf().getObjectId()) == commit) {
                walk.dispose()
                indraGit.git().close()
                return depth
            }
        }
        depth++
        commit = walk.parseCommit(commit.getParents()[0])
    }
}